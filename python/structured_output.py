import openai
from dotenv import load_dotenv
from pydantic import BaseModel
from pprint import pprint
from utils.conversion import object_to_dict

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
class CalendarEvent(BaseModel):
    name: str
    date: str
    participants: list[str]

try:
    # –í—ã–∑–æ–≤ API —Å —è–≤–Ω—ã–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º JSON
    completion = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You must respond strictly in valid JSON format."},  # üëà –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ JSON-–æ—Ç–≤–µ—Ç–∞
            {"role": "user", "content": "Extract the event information and return it as a JSON object. Alice and Bob are going to a meeting on 2024-08-06."}
        ],
        response_format={"type": "json_object"}  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π response_format
    )
    
    print(completion)
    print("\n_________\n")

    pprint(object_to_dict(completion))
    print("\n_________\n")

    event = completion.choices[0].message.content  # –ü–æ–ª—É—á–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
    print(event)

except Exception as e:
    print("Error creating chat completion:", e)

